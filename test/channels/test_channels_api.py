"""
    DDHub Client Gateway

    DDHub Client Gateway  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import unittest
import uuid

import ddhub_gateway_client
from ddhub_gateway_client.exceptions import ApiException, ApiValueError
from ddhub_gateway_client.api.channels_api import ChannelsApi  # noqa: E501
from ddhub_gateway_client.models import CreateChannelDto, ChannelConditionsDto, GetChannelResponseDto, GetChannelQualifiedDidsDto, UpdateChannelDto


def construct_create_channel_dto():
    rand_fqcn = str(uuid.uuid4()).replace("-", ".")
    return CreateChannelDto(
        fqcn = rand_fqcn,
        payload_encryption=False,
        type="sub",
        conditions=ChannelConditionsDto(
            dids=[],
            roles=[],
            topics=[],
        )
    )
    
class TestChannelsApi(unittest.TestCase):
    """ChannelsApi unit test stubs"""
    configuration = ddhub_gateway_client.Configuration(
        host = "https://ddhub-gateway-dev.energyweb.org"
    )
    api_client:ddhub_gateway_client.ApiClient = None
    channel:CreateChannelDto = None
    
    def setUp(self):
        self.api_client = ddhub_gateway_client.ApiClient(self.configuration)
        self.api_instance =  ChannelsApi(self.api_client)
        ccdto = construct_create_channel_dto()
        self.channel = self.api_instance.channel_controller_create(ccdto)
        
    def tearDown(self):
        if self.channel is not None:
            self.api_instance.channel_controller_delete(fqcn = self.channel["fqcn"])
            self.channel = None
        self.api_client.close()

    def test_channel_controller_create(self):
        """Test case for channel_controller_create
        """
        fqcn = str(uuid.uuid4()).replace("-", ".")
        response_body, response_status, response_headers = \
            self.api_instance.channel_controller_create(
            create_channel_dto= CreateChannelDto(
                fqcn=fqcn,
                payload_encryption=True,
                type="pub",
                conditions=ChannelConditionsDto(
                    dids=[],
                    roles=[],
                    topics=[],
                )
            ),
            _return_http_data_only=False
        )
        self.assertEqual(response_status, 201)
        self.api_instance.channel_controller_delete(fqcn = fqcn)


    def test_channel_controller_delete(self):
        """Test case for channel_controller_delete
        """
        fqcn = str(uuid.uuid4()).replace("-", ".")
        self.api_instance.channel_controller_create(
            create_channel_dto= CreateChannelDto(
                fqcn=fqcn,
                payload_encryption=True,
                type="pub",
                conditions=ChannelConditionsDto(
                    dids=[],
                    roles=[],
                    topics=[],
                )
            ),
            _return_http_data_only=False
        )
        response_body, response_status, response_headers = \
            self.api_instance.channel_controller_delete(
            fqcn=fqcn,
            _return_http_data_only=False
        )
        self.assertEqual(response_status, 200)
        
    def test_channel_controller_get_invalid_fqcn(self):
        """Test case for channel_controller_get_invalid_fqcn
        """
        invalid_fqcn = "invalid_fqcn"
        with self.assertRaises(ApiException):
            self.api_instance.channel_controller_get(fqcn=invalid_fqcn)
        non_existing_fqcn = "non.existing.fqcn"
        with self.assertRaises(ApiException):
            self.api_instance.channel_controller_get(fqcn=non_existing_fqcn)

    def test_channel_controller_get(self):
        """Test case for channel_controller_get
        """
        response_body, response_status, response_headers = \
        self.api_instance.channel_controller_get(
            fqcn=self.channel["fqcn"],
            _return_http_data_only=False
        )
        self.assertEqual(response_status, 200)
        self.assertIsInstance(response_body, GetChannelResponseDto)
 

    def test_channel_controller_get_by_type(self):
        """Test case for channel_controller_get_by_type
        """
        channel_type = "sub"
        response_sub_tuple = self.api_instance.channel_controller_get_by_type(
            type= channel_type,
            _return_http_data_only=False
        )
        channel_type = "pub"
        response_pub_tuple = self.api_instance.channel_controller_get_by_type(
            type= channel_type,
            _return_http_data_only=False
        )
        channel_type = "download"
        response_download_tuple = self.api_instance.channel_controller_get_by_type(
            type= channel_type,
            _return_http_data_only=False
        )
        channel_type = "upload"
        response_upload_tuple = self.api_instance.channel_controller_get_by_type(
            type= channel_type,
            _return_http_data_only=False
        )
        self.assertEqual(response_sub_tuple[1], 200)
        self.assertEqual(response_pub_tuple[1], 200)
        self.assertEqual(response_download_tuple[1], 200)
        self.assertEqual(response_upload_tuple[1], 200)
        self.assertIsInstance(response_sub_tuple[0], (list,GetChannelResponseDto))
        self.assertIsInstance(response_pub_tuple[0], (list,GetChannelResponseDto))
        self.assertIsInstance(response_download_tuple[0], (list,GetChannelResponseDto))
        self.assertIsInstance(response_upload_tuple[0], (list,GetChannelResponseDto))
        
        
    def test_channel_controller_get_by_invalid_type(self):
        """Test case for channel_controller_get_by_invalid_type
        """
        channel_type = "invalid"
        with self.assertRaises(ApiValueError):
            self.api_instance.channel_controller_get_by_type(
                type=channel_type
            )
            
    def test_channel_controller_get_qualified_dids(self):
        """Test case for channel_controller_get_qualified_dids
        """
        response_body, response_status, response_headers = \
        self.api_instance.channel_controller_get_qualified_dids(
            fqcn=self.channel["fqcn"],
            _return_http_data_only=False
        )
        self.assertEqual(response_status, 200)
        self.assertIsInstance(response_body, GetChannelQualifiedDidsDto)
        

    def test_channel_controller_refresh_did(self):
        """Test case for channel_controller_refresh_did
        """
        response_body, response_status, response_headers = \
        self.api_instance.channel_controller_refresh_did(
            _return_http_data_only=False
        )
        self.assertEqual(response_status, 200)
                

    def test_channel_controller_update(self):
        """Test case for channel_controller_update
        """
        ucdto = UpdateChannelDto(
            type="sub",
            payload_encryption=True,
            conditions=ChannelConditionsDto(
                dids=[],
                roles=[],
                topics=[],
            )
        )
        response_body, response_status, response_headers = \
        self.api_instance.channel_controller_update(
            fqcn=self.channel["fqcn"],
            update_channel_dto=ucdto,
            _return_http_data_only=False
        )
        self.assertEqual(response_status, 200)
        self.assertIsInstance(response_body, dict)
        ucdto = UpdateChannelDto(
            type="sub",
            payload_encryption=True,
            conditions=ChannelConditionsDto(
                dids=["did:ethr:volta:0x552761011ea5b332605Bc1Cc2020A4a4f8C738CD"],
                roles=[],
                topics=[],
            )
        )
        self.api_instance.channel_controller_update(
            fqcn=self.channel["fqcn"],
            update_channel_dto=ucdto,
        )
        
if __name__ == '__main__':
    unittest.main()
