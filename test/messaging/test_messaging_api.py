"""
    DDHub Client Gateway

    DDHub Client Gateway  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

import unittest
import json
import random, string


import ddhub_gateway_client
from ddhub_gateway_client.api.messaging_api import MessagingApi  # noqa: E501
from ddhub_gateway_client.model.send_message_dto import SendMessageDto  # noqa: E501
from ddhub_gateway_client.model.send_messagel_response_dto import SendMessagelResponseDto  # noqa: E501
from ddhub_gateway_client.model.get_messages_response_dto import GetMessagesResponseDto  # noqa: E501


def random_string(length):
   letters = string.ascii_lowercase
   return ''.join(random.choice(letters) for i in range(length))

class TestMessagingApi(unittest.TestCase):
    """MessagingApi unit test stubs"""
    configuration = ddhub_gateway_client.Configuration(
        host = "https://ddhub-gateway-dev.energyweb.org"
    )
    owner = "libtesting.apps.aresguerre.iam.ewc"
    role = "topiccreator"

    def setUp(self):
        self.api_client = ddhub_gateway_client.ApiClient(self.configuration)
        self.api_instance = MessagingApi(self.api_client)  # noqa: E501

    def tearDown(self):
        self.api_client.close()

    def test_message_controlller_create(self):
        """Test case for message_controlller_create

        """

        api_response_body, api_response_status, api_response_headers = \
        self.api_instance.message_controlller_create(
            SendMessageDto(
                fqcn="test.pub.channel",
                topic_name="Topic_JSON_LIB_V1",
                topic_version="1.0.0",
                topic_owner=self.owner,
                transaction_id=random_string(6),
                payload=json.dumps({"data": 22}),
            ),
            _return_http_data_only=False
        )

        self.assertEqual(200, api_response_status)
        self.assertIsInstance(api_response_body, SendMessagelResponseDto)



    def test_message_controlller_download_message(self):
        """Test case for message_controlller_download_message

        """
        api_response_body, api_response_status, api_response_headers = \
        self.api_instance.message_controlller_get_message(
            fqcn="test.lib.download.channel",
            client_id="123456",
            _return_http_data_only=False
        )

        self.assertEqual(200, api_response_status)
        self.assertIsInstance(api_response_body, (list,GetMessagesResponseDto))

        file_id :str= json.loads(api_response_body[0].payload)["fileId"]

        response_body, response_status, response_headers = \
        self.api_instance.message_controlller_download_message(
            file_id=file_id,
            _return_http_data_only=False
        )
        
        self.assertEqual(200, response_status)
        file_content = response_body.read()
        self.assertIsInstance(file_content,bytes)
        with open("./test/messaging/files/"+file_id+".csv", "wb") as file:
            file.write(file_content)

    def test_message_controlller_get_message(self):
        """Test case for message_controlller_get_message

        """
        api_response_body, api_response_status, api_response_headers = \
        self.api_instance.message_controlller_get_message(
            fqcn="test.lib.sub.channel",
            client_id="123456",
            _return_http_data_only=False
        )

        self.assertEqual(200, api_response_status)
        self.assertIsInstance(api_response_body, (list,GetMessagesResponseDto))


    def test_message_controlller_upload_file(self):
        """Test case for message_controlller_upload_file

        """

        file_path = "./test/messaging/files/upload.csv"

        response_body, response_status, response_headers = \
        self.api_instance.message_controlller_upload_file(
            file=open(file_path, "rb"),
            fqcn="test.lib.upload.channel",
            topic_name="Topic_CSV_LIB_V2",
            topic_version="1.0.0",
            topic_owner=self.owner,
            _return_http_data_only=False
        )
        self.assertEqual(201, response_status)
        self.assertIsInstance(response_body, SendMessagelResponseDto)

if __name__ == '__main__':
    unittest.main()
